unit BruttoNettoFunkcje;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, UnitMiesieczne, unitMiesiaceRoku;

Const
  ZUS_LIMIT = 157770;
  WOLNA_KW = 43.76;
  PROC_EMERYT = 0.0976;
  PROC_RENTOW = 0.015;
  PROC_CHOROB = 0.0245;
  PROC_ZDR_OD = 0.0775;
  PROC_ZDR = 0.09;
  KOSZT_WK = 300;
  KOSZT_MN = 250;
  PIT_MN = 0.17;
  PIT_W = 0.32;
  PRÓG_PIT = 85528;

function dajStycznioweNetto(brutto: Double; kosztPrzychodu: Double;
  ulga26: Boolean): Double;
function dajBrutto(netto, kPrzychodu: Double; ulgaDo26: Boolean): Double;

implementation

function zredukujDoSetnych(liczba: double): double;
begin
  liczba := liczba * 100;
  liczba := round(liczba);
  result := liczba / 100;
end;

function liczEmerytalne(brutto, emerytalneRazem: Double): Double;
begin
  if brutto < emerytalneRazem then
    result := zredukujDoSetnych(brutto * PROC_EMERYT)
  else if (brutto > emerytalneRazem) AND (emerytalneRazem > 0) then
    result := zredukujDoSetnych(emerytalneRazem * PROC_EMERYT)
  else
    result := 0;
end;

function liczRentowe(brutto, rentoweRazem: Double): Double;
begin
  if brutto < rentoweRazem then
    result := zredukujDoSetnych(brutto * PROC_RENTOW)
  else if (brutto > rentoweRazem) AND (rentoweRazem > 0) then
    result := zredukujDoSetnych(rentoweRazem * PROC_RENTOW)
  else
    result := 0;
end;

function liczPreZaliczkê(podstawa, podstawaRazem: Double): Double;
var
  czêœæ1, czêœæ2, zaliczka: Double;
begin
  if podstawaRazem < PRÓG_PIT then
  begin
  zaliczka:= zredukujDoSetnych(podstawa * PIT_MN - WOLNA_KW);
  if (zaliczka>0) then result:=zaliczka else result:= 0;
  end
  else if (podstawaRazem - podstawa < PRÓG_PIT) AND (podstawaRazem > PRÓG_PIT)
  then
  begin
    czêœæ1 := PRÓG_PIT - (podstawaRazem - podstawa);
    czêœæ1 := czêœæ1 * PIT_MN;
    czêœæ2 := (podstawaRazem - PRÓG_PIT) * PIT_W;
    result := zredukujDoSetnych(czêœæ1 + czêœæ2 - WOLNA_KW)
  end
  else
    result := zredukujDoSetnych(podstawa * PIT_W);
end;

function liczNieskonczone26(podstawa, podstawaRazem, BruttoRazem, zdrDoOdliczenia: Double): Double;
var
  czêœæ1, czêœæ2, zaliczka: Double;
begin
  if BruttoRazem < PRÓG_PIT then
  begin
  zaliczka:= 0
  end
  else if (BruttoRazem > PRÓG_PIT) and (PodstawaRazem < PRÓG_PIT *2) then
  begin
  zaliczka:= round(zredukujDoSetnych(podstawa * PIT_MN)-zdrDoOdliczenia-WOLNA_KW)
  end
  else if (PodstawaRazem > PRÓG_PIT * 2) and (PodstawaRazem < PRÓG_PIT * 2 + podstawa) then
  begin
  czêœæ2:= podstawaRazem - (PRÓG_PIT *2);
  czêœæ1:= podstawa - czêœæ2;
  czêœæ1:= czêœæ1 * 0.17;
  czêœæ2:= czêœæ2 * 0.32;
  zaliczka:= round(czêœæ1+czêœæ2-zdrDoOdliczenia-WOLNA_KW);
  end
  else
  begin
  zaliczka:= round(zredukujDoSetnych(podstawa * PIT_W)-zdrDoOdliczenia);
  end;
  result:=zaliczka;
end;

function dajStycznioweNetto(brutto: Double; kosztPrzychodu: Double;
  ulga26: Boolean): Double;
var
  I: Integer;
  emerytalne, rentowe, chorobowe, podstawa, zaliczka, zdrowotne: Double;
var
  BruttoRazem, spo³eczneRazem, podstawaRazem, podstawaZdr, zdrDoOdliczenia,
    prezaliczka, wynik: Double;
begin
  spo³eczneRazem := ZUS_LIMIT;
  podstawaRazem := 0;
  BruttoRazem := BruttoRazem + brutto;
  emerytalne := liczEmerytalne(brutto, spo³eczneRazem);
  rentowe := liczRentowe(brutto, spo³eczneRazem);
  chorobowe := brutto * PROC_CHOROB;
  podstawaZdr := zredukujDoSetnych(brutto - emerytalne - rentowe
    - chorobowe);
  podstawa := round(podstawaZdr - kosztPrzychodu);
  podstawaRazem := podstawaRazem + podstawa;
  zdrDoOdliczenia := podstawaZdr * PROC_ZDR_OD;
  prezaliczka := liczPreZaliczkê(podstawa, podstawaRazem);

  if (prezaliczka - zdrDoOdliczenia > 0) then
    zaliczka := round(prezaliczka - zdrDoOdliczenia)
  else
    zaliczka := 0;

  if ulga26 = true then
    zaliczka := liczNieskonczone26(podstawa, podstawaRazem,
      BruttoRazem, zdrDoOdliczenia);

  zdrowotne := zredukujDoSetnych(podstawaZdr * PROC_ZDR);

  if (zdrowotne > prezaliczka) then
    zdrowotne := prezaliczka;

  wynik := zredukujDoSetnych(podstawaZdr - zaliczka -
  zdrowotne);
  spo³eczneRazem := spo³eczneRazem - brutto;

  result := wynik;
end;

function dajBrutto(netto, kPrzychodu: Double; ulgaDo26: Boolean): Double;
var
  min, max, I: Integer;
  //msc_roku: unitMiesiaceRoku.tStringArray;
  wynik, stycznioweNetto: Double;

begin
  wynik := -1;
  min := trunc(netto * 100);
  max := trunc(netto * 200);

  for I := min to max do
  begin
    stycznioWeNetto := dajStycznioweNetto(I/100, kPrzychodu, ulgaDo26);
    if stycznioWeNetto = netto then
    begin
    wynik := I/100;
    break
    end;
  end;

  result := wynik;
end;

end.
